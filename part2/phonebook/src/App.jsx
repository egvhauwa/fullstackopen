import { useState, useEffect } from 'react';
//import axios from 'axios';
import Notification from './components/Notification';
import personService from './services/persons';

const Filter = ({ enterFilter, filter, handleFilterChange }) => (
  <form onSubmit={enterFilter}>
    filter shown with <input value={filter} onChange={handleFilterChange} />
  </form>
);

const PersonForm = ({
  addPerson,
  newName,
  handleNameChange,
  newNumber,
  handleNumberChange,
}) => (
  <form onSubmit={addPerson}>
    <div>
      name: <input value={newName} onChange={handleNameChange} />
    </div>
    <div>
      number: <input value={newNumber} onChange={handleNumberChange} />
    </div>
    <div>
      <button type='submit'>add</button>
    </div>
  </form>
);

const Person = ({ person, deletePerson }) => (
  <p>
    {person.name} {person.number}{' '}
    <button onClick={() => deletePerson(person.id)}>delete</button>
  </p>
);

const Persons = ({ persons, deletePerson }) => (
  <div>
    {persons.map((person) => (
      <Person key={person.id} person={person} deletePerson={deletePerson} />
    ))}
  </div>
);

const App = () => {
  const [persons, setPersons] = useState([]);
  const [newName, setNewName] = useState('');
  const [newNumber, setNewNumber] = useState('');
  const [filter, setFilter] = useState('');
  const [statusMessage, setStatusMessage] = useState(null);
  const [errorMessage, setErrorMessage] = useState(null);

  useEffect(() => {
    console.log('effect');
    personService.getAll().then((initialPersons) => {
      setPersons(initialPersons);
    });
  }, []);

  const addPerson = (event) => {
    event.preventDefault();
    console.log('button clicked', event.target);

    const nameExists = persons.some((person) => person.name === newName);
    const personObject = {
      name: newName,
      number: newNumber,
      //id generated by server!!!
    };
    if (nameExists) {
      const personToUpdate = persons.find((person) => person.name === newName);
      if (
        window.confirm(
          `${personToUpdate.name} is already added to the phonebook, replace the old number with a new one?`
        )
      ) {
        personService
          .update(personToUpdate.id, personObject)
          .then((returnedPerson) => {
            setPersons(
              persons.map((person) =>
                person.id !== personToUpdate.id ? person : returnedPerson
              )
            );
            setStatusMessage(`Updated ${returnedPerson.name}`);
            setTimeout(() => {
              setStatusMessage(null);
            }, 5000);
          })
          .catch((error) => {
            setPersons(
              persons.filter((person) => person.id !== personToUpdate.id)
            );
            setErrorMessage(
              `Information of '${personToUpdate.name}' was already deleted from server`
            );
            setTimeout(() => {
              setErrorMessage(null);
            }, 5000);
          });
      }
    } else {
      personService.create(personObject).then((returnedPerson) => {
        setPersons(persons.concat(returnedPerson));
        setStatusMessage(`Added ${returnedPerson.name}`);
        setTimeout(() => {
          setStatusMessage(null);
        }, 5000);
      });
    }

    setNewName('');
    setNewNumber('');
  };

  const deletePerson = (id) => {
    const personToDelete = persons.find((person) => person.id === id);
    if (window.confirm(`Delete ${personToDelete.name}?`)) {
      personService.deleteObject(id).then(() => {
        setPersons(persons.filter((person) => person.id !== id));
        setStatusMessage(`Deleted ${personToDelete.name}`);
        setTimeout(() => {
          setStatusMessage(null);
        }, 5000);
      });
    }
  };

  const handleNameChange = (event) => {
    console.log(event.target.value);
    setNewName(event.target.value);
  };

  const handleNumberChange = (event) => {
    console.log(event.target.value);
    setNewNumber(event.target.value);
  };

  const enterFilter = (event) => {
    event.preventDefault();
  };

  const handleFilterChange = (event) => {
    console.log(event.target.value);
    setFilter(event.target.value);
  };

  const personsToShow = persons.filter((person) =>
    person.name.toLowerCase().includes(filter.toLowerCase())
  );

  return (
    <div>
      <h2>Phonebook</h2>
      <Notification message={statusMessage} />
      <Notification message={errorMessage} error />
      <Filter
        enterFilter={enterFilter}
        filter={filter}
        handleFilterChange={handleFilterChange}
      />
      <h2>Add a new</h2>
      <PersonForm
        addPerson={addPerson}
        newName={newName}
        handleNameChange={handleNameChange}
        newNumber={newNumber}
        handleNumberChange={handleNumberChange}
      />
      <h2>Numbers</h2>
      <Persons persons={personsToShow} deletePerson={deletePerson} />
    </div>
  );
};

export default App;
